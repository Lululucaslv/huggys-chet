create table "public"."availability" (
    "id" bigint generated by default as identity not null,
    "therapist_id" uuid not null,
    "start_time" timestamp with time zone not null,
    "end_time" timestamp with time zone not null,
    "is_booked" boolean not null default false,
    "created_at" timestamp with time zone not null default now(),
    "updated_at" timestamp with time zone not null default now()
);

CREATE UNIQUE INDEX availability_pkey ON public.availability USING btree (id);
CREATE INDEX availability_therapist_id_idx ON public.availability USING btree (therapist_id);
CREATE INDEX availability_start_time_idx ON public.availability USING btree (start_time);
CREATE INDEX availability_is_booked_idx ON public.availability USING btree (is_booked);

alter table "public"."availability" add constraint "availability_pkey" PRIMARY KEY using index "availability_pkey";

alter table "public"."availability" add constraint "availability_therapist_id_fkey" 
FOREIGN KEY (therapist_id) REFERENCES public.user_profiles(id) ON DELETE CASCADE;

alter table "public"."availability" add constraint "availability_time_check" 
CHECK (end_time > start_time);

ALTER TABLE "public"."availability" ENABLE ROW LEVEL SECURITY;

CREATE POLICY "Therapists can view their own availability"
ON "public"."availability"
AS PERMISSIVE
FOR SELECT
TO authenticated
USING (
    EXISTS (
        SELECT 1 FROM public.user_profiles 
        WHERE user_profiles.id = availability.therapist_id 
        AND user_profiles.user_id = auth.uid()::text
    )
);

CREATE POLICY "Clients can view available slots"
ON "public"."availability"
AS PERMISSIVE
FOR SELECT
TO authenticated
USING (is_booked = false);

CREATE POLICY "Therapists can create their own availability"
ON "public"."availability"
AS PERMISSIVE
FOR INSERT
TO authenticated
WITH CHECK (
    EXISTS (
        SELECT 1 FROM public.user_profiles 
        WHERE user_profiles.id = availability.therapist_id 
        AND user_profiles.user_id = auth.uid()::text
    )
);

CREATE POLICY "Therapists can update their own availability"
ON "public"."availability"
AS PERMISSIVE
FOR UPDATE
TO authenticated
USING (
    EXISTS (
        SELECT 1 FROM public.user_profiles 
        WHERE user_profiles.id = availability.therapist_id 
        AND user_profiles.user_id = auth.uid()::text
    )
)
WITH CHECK (
    EXISTS (
        SELECT 1 FROM public.user_profiles 
        WHERE user_profiles.id = availability.therapist_id 
        AND user_profiles.user_id = auth.uid()::text
    )
);

CREATE POLICY "Therapists can delete their own availability"
ON "public"."availability"
AS PERMISSIVE
FOR DELETE
TO authenticated
USING (
    EXISTS (
        SELECT 1 FROM public.user_profiles 
        WHERE user_profiles.id = availability.therapist_id 
        AND user_profiles.user_id = auth.uid()::text
    )
);

CREATE TRIGGER update_availability_updated_at 
BEFORE UPDATE ON public.availability 
FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
